2+2
sum(c(T,T,T,F,F,T,T))
rand.impute <- function(x){ # x es un vector de datos que puede contener NA (númerico, categórico...)
missing <- is.na(x) # missing contiene un vector de valores T/F dependiendo del NA de x, TRUE si es na , false si no
n.missing <- sum(missing) #suma de los trues ( cuantos valores son NA)
x.obs <- x[!missing] #valores que tienen dato diferente de NA en X , valores conocidos
imputed <- x #por defecto, devolveré lo mismo que había entrado por parámetro
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE) #en los valores que faltaban,
#los reemplazamos por una muestra de los conocidos
return(imputed)
}
##Lo anterior es una técnica básica de probabilidad, el reemplazo.
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rando.impute(dataframe[,col])
}
}
data <- read.csv("../../data/tema1/missing-data.csv", na.strings = "")
setwd("C:/Desarrollos/Curso R/scripts/tema1")
data <- read.csv("../../data/tema1/missing-data.csv", na.strings = "")
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rando.impute(dataframe[,col])
}
return(dataframe)
}
data <- read.csv("../../data/tema1/missing-data.csv", na.strings = "")
random.impute.data.frame(data, c(1,2))
random.impute.data.frame(data, c(1,2))
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = random.impute(dataframe[,col])
}
return(dataframe)
}
random.impute.data.frame(data, c(1,2))
random.impute.data.frame <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.impute(dataframe[,col])
}
return(dataframe)
}
random.impute.data.frame(data, c(1,2))
data <- random.impute.data.frame(data, c(1,2))
View(data)
View(data)
data$Income[data$Income==0] <-NA
data <- random.impute.data.frame(data, c(1,2))
View(data)
family.salary = c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size = c(4, 3, 2, 2, 3, 4, 3)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car
# Unique nos devuelve el vector pasado sin duplicados
unique(family)
# Unique nos devuelve el vector pasado sin duplicados
unique(family)
family <- data.frame(family.salary, family.size, family.car)
# Unique nos devuelve el vector pasado sin duplicados
unique(family)
View(family)
# Unique nos devuelve el vector pasado sin duplicados
family.unique <- unique(family)
View(family.unique)
duplicated(family)
View(family)
family[duplicated(family),]
family[!duplicated(family),] # Para indicar que me devuelva sólo las duplicadas
View(family.unique)
#Reescalado de valores muy grandes, que dominan la estadística, en el rango 0-1
install.packages("scales")
library(scales)
students <- read.csv("../../data/tema1/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income) ##Reescalamos income a 0-1
View(family.unique)
View(students)
(students$Income - min(students$Income))/(max(students$Income - min(students$Income))) #Fórmula de reescalado , lo mismo de arriba
rescale(students$Income, to = c(0, 100)) #Indicamos el rango de escalado
rescale.many <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos reescalado ", length(cols), " variable(s)"))
dataframe
}
#Reescalar varias variables a la vez
rescale.many(students, c(1,4))
View(rescale.many)
View(rescale.many)
View(students)
#Reescalar varias variables a la vez
students <- rescale.many(students, c(1,4))
View(students)
